
/*
 * Filename: sc_displaydata_type.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 *
 * Description: Signalclass
 */

#ifndef _H_DEFINE_SC_DISPLAYDATA_TYPE
#define _H_DEFINE_SC_DISPLAYDATA_TYPE

#include "project.h"
#include "global.h"
#include "rte_types.h"

/* USER CODE START SC_DISPLAYDATA_INCLUDES */

/* USER CODE END SC_DISPLAYDATA_INCLUDES */



/**********************************************************************
 *       Type Definition for SC_DISPLAYDATA signal    
 **********************************************************************/

/* USER CODE START SC_DISPLAYDATA_USERDEFINITIONS */

/* USER CODE END SC_DISPLAYDATA_USERDEFINITIONS */

typedef 
/* USER CODE START SC_DISPLAYDATA_SIGNALDATADEFINITION */
struct
{
    // Is set to true, if the dedicated widget has to be highlighted.
    boolean_t invHours;
    boolean_t invMinutes;
} 
/* USER CODE END SC_DISPLAYDATA_SIGNALDATADEFINITION */
SC_DISPLAYDATA_data_t;

/* USER CODE START InitSC_DISPLAYDATA */
#define SC_DISPLAYDATA_INIT_DATA ((SC_DISPLAYDATA_data_t){})
/* USER CODE END InitSC_DISPLAYDATA */


/**
 * Default IN driver API
 * \param SC_DISPLAYDATA_data_t *const data : [OUT] scaled data read from the driver
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SC_DISPLAYDATA_driverIn(SC_DISPLAYDATA_data_t *const data);



/**
 * Default OUT driver API
 * \param const SC_DISPLAYDATA_data_t  *const data : [IN] signal data for the driver, will be scaled in this function
 * \return RC_SUCCESS is all was ok, error code otherwise
 */
RC_t SC_DISPLAYDATA_driverOut(const SC_DISPLAYDATA_data_t  *const data);


/* USER CODE START SC_DISPLAYDATA_USERFUNCTIONS */

/* USER CODE END SC_DISPLAYDATA_USERFUNCTIONS */


#endif